import { fogValues } from "@/utils/constants";

export const fogDefines = {
  NUM_V_LIGHTS: fogValues.start.lights.length
}

export var defaultVertDef = "precision highp float;\nprecision highp int;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec4 color;"
          , defaultFragDef = "precision highp float;\nprecision highp int;\n#define GLSLIFY 1\n"
          , normalsVertDef = "#define GLSLIFY 1\nvec3 objectNormal = vec3( normal );\nvec3 transformedNormal = objectNormal;\n\n#ifdef USE_INSTANCING\n    mat3 m = mat3( instanceMatrix );\n    transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n    transformedNormal = m * transformedNormal;\n#endif\n\ntransformedNormal = normalMatrix * transformedNormal;\n\nvNormal = normalize( transformedNormal );"
          , fogParamsVertDef = "#define GLSLIFY 1\nvarying vec3 vWorldPosition;\nvarying float vFogDepth;\nvarying float vFogHeight;"
          , fogOutputVertDef = "#define GLSLIFY 1\nvec4 worldPosition = vec4(transformedPosition, 1.0); // global coordinates\n#ifdef USE_INSTANCING\n    worldPosition = instanceMatrix * worldPosition;\n#endif\nworldPosition = modelMatrix * worldPosition;\nvWorldPosition = worldPosition.xyz;\nvFogDepth = -mvPosition.z;\nvFogHeight = -mvPosition.y;"
          , fogOutputFragDef = '#define GLSLIFY 1\n// float depth = 1. - gl_FragCoord.z / gl_FragCoord.w;\n\nvec3 fogColor = gl_FragColor.rgb; \nvec4 debugColorOriginal = vec4(gl_FragColor.rgb, 1.0);\n\nif (uEnableFog) {\n\tfor ( int i = 0; i < NUM_V_LIGHTS; i++ ) {\n\t\tVolumetricLight light = volumetricLights[i];\n\n\t\tfloat fogOriginDistance = distance(vWorldPosition, light.position);\n\t\tfloat fogFactor = smoothstep(light.near, light.far, fogOriginDistance) * light.strength;\n\n\t\tfogColor = mix(light.color, fogColor, fogFactor + (1.0 - light.strength)); // Volumetric "fog"\n\t}\n\t// World fog\n\t// Depth fog\n\tfloat worldDepthFogFactor = smoothstep( uFogNear_D, uFogFar_D, vFogDepth );\n\t// gl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor, worldDepthFogFactor);\n\t// gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0, 1.0, 1.0), worldDepthFogFactor); // debug\n\n\t// Height fog\n\t// float worldHeightFogFactor = smoothstep(-uFogFar_H, -uFogNear_H, vFogHeight ); // Turned around\n\tfloat worldHeightFogFactor = smoothstep(uFogNear_H, uFogFar_H, vWorldPosition.y - cameraPosition.y ); // based on distance from camera Y\n\t// gl_FragColor.rgb = mix(fogColor, gl_FragColor.rgb, worldDepthFogFactor);\n\t// gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0, 1.0, 1.0), worldHeightFogFactor); // debug\n\n\t// World Fog overlay\n\tfogColor = mix(fogColor, uWorldFogColor, uWorldFogColorMix);\n\n\t// Combine depth and height fog\n\t// gl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor, clamp(worldHeightFogFactor*uFogStrength_H+worldDepthFogFactor*uFogStrength_D, 0.0, 1.0));\n\tgl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor, clamp(worldDepthFogFactor*uFogStrength_D, 0.0, 1.0));\n\tgl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor, clamp(worldHeightFogFactor*uFogStrength_H, 0.0, 1.0));\n\n\tif(uDebugFog) {\n\t\t// gl_FragColor.rgb = mix(debugColorOriginal.rgb, vec3(0.0, 1.0, 1.0), clamp(worldDepthFogFactor*worldHeightFogFactor+worldHeightFogFactor*worldDepthFogFactor, 0.0, 1.0)); // debug\n\t\tgl_FragColor.rgb = mix(debugColorOriginal.rgb, vec3(0.9, 0.38, 0.27), clamp(worldHeightFogFactor*uFogStrength_H+worldDepthFogFactor*uFogStrength_D, 0.0, 1.0) * uFogStrength); // debug\n\t}\n}'
          , fogParamsFragDef = "#define GLSLIFY 1\nvarying vec3 vWorldPosition;\nvarying float vFogDepth;\nvarying float vFogHeight;\n\nuniform float uFogNear_D;\nuniform float uFogFar_D;\nuniform float uFogStrength_D;\nuniform float uFogNear_H;\nuniform float uFogFar_H;\nuniform float uFogStrength_H;\nuniform float uFogStrength;\nuniform bool uEnableFog;\nuniform vec3 uWorldFogColor;\nuniform float uWorldFogColorMix;\n\nuniform bool uDebugFog;\n\nstruct VolumetricLight {\n    float near;\n    float far;\n    float strength;\n    vec3 color;\n    vec3 position;\n};\n\nuniform VolumetricLight volumetricLights[ NUM_V_LIGHTS ];";